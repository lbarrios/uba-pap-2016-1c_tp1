En este ejercicio vamos a emular el comportamiento de un arbol binario para resolver el ejercicio.
Esta estructura nos permite acumular y ordenar operaciones para evitar repetirlas y reducir la complejidad.

Emulacion del "Arbol"
----------------------

	El Arbol esta implementado sobre un arreglo que accedemos utilizando algebra de indices.
	
		* La profundidad se calcula utilizando el Logaritmo en base 2.
		* Los hijos pueden conseguirse de la siguiente manera:
			+ Multiplo de 2 del numero actual. (Hijo izquierdo)
			+ El numero que sigue inmediatamente al hijo izquierdo. (Hijo derecho)
		* El padre es la division entera por dos del numero actual.

	Es importante notar que todas estas operaciones son simples y unicamente requieren de dos datos (posicion actual + tamanio del arbol). Al no recorrer ningun elemento ni generar ningun loop de llamados a funciones, podemos garantizar que son todas O(1).

	Como dato de color, nuestro arreglo esta corrido un elemento para la izquierda, ya que empieza en 0 y no en 1. De todas maneras, esto solo agrega algunas restas y/o sumas algoritmos. La logica detras de todas las cuentas siguen siendo la misma.

Definicion del Intervalo
------------------------

	Llamamos intervalo a el conjunto de nodos hojas que son descendientes de un nodo en particular.
	El intervalo de un nodo hoja es si mismo. El intervalo de la raiz es todo el arbol.

	Con el fin de dar un ejemplo grafico:

		{0-0}		{1-1}		{2-2}			{3-3}
		[xxx]		[xxx]		[xxx]			[xxx]
			{0-1}						{2-3}
			[xxx]						[xxx]
						{0-3}
						[xxx]

Emulacion de los Intervalos
----------------------------

	Nuevamente, por algebra de indices los intervalos pueden sacarse en O(1). Nos basta con calcular el extremo izquierdo y el extremo derecho, ya que todos los valores del medio estaran dentro del intervalo.

		* Para sacar el extremo izquierdo, simplemente tengo que multiplicar el valor actual por 2 elevado a la cantidad de niveles que me falta recorrer. Esto nos dara el valor mas a la izquierda.
		* Para sacar el extremo derecho: 
			+ En caso de tener vecino de la derecha, podemos tener en cuenta que nuestro extremo derecho va a estar al lado de su extremo izquierdo.Entonces voy al vecino de la derecha, busco el extremo izquierdo y me muevo un nodo a la izquierda.
			+ En caso de no tener vecino de la derecha, quiere decir que estamos a la derecha de todo, por lo cual nuestro exremo derecho tiene que ser si o si la ultima posicion del arbol.


Armado de Arbol
---------------
	
	Como fue explicado al comienzo del ejercicio, podemos utilizar nuestro arbol para simplificar la busqueda de multiplicaciones, dejando almacenadas operaciones para uso en futuras busquedas y evitarnos el costo de re-procesarlas.

	Llenamos el arbol binario. En las hojas ponemos los datos originales. En el resto de los nodos ponemos la multiplicacion de sus hijos.
	En total, tendremos (n*2)-1 elementos, todos de operaciones simples, por lo cual la complejidad queda acotada en O(n).

	[A]		[B]			[C]		[D]
		[AB]				[CD]
				[ABCD]

	En caso de no tener cantidad suficiente para llenar un arbol binario, lo rellenamos con nulls. Por ejemplo  


	A		B		C		D		E		F		G		(null)
		AB				CD				EF				G
				ABCD								EFG
								ABCDEFG

Operaciones con un intervalo
---------------------------


	Empezemos por algo simple. Si pedimos el valor de la multiplicacion del intervalor [0-1]:


	Paso 1:
		Empiezo por la raiz.

		[0]		[1]		[2]		[3]
		[A]		[B]		[C]		[D]
			[0-1]			[2-3]
			[AB]			[CD]
					>[0-3]
					>[ABCD]

	Paso2:
		Vemos que el hijo izquierdo de la raiz contiene [0-1], entonces vamos para ese lado.

		[0]		[1]		[2]		[3]
		[A]		[B]		[C]		[D]
			>[0-1]			[2-3]
			>[AB]			[CD]
					[0-3]
					[ABCD]

	Paso3:

		Como el nodo [0-1] esta completamente contenido en [0-1], entonces elijo el valor en ese nodo.
		Resultado: AB


	Pasemos a un caso mas dificil. Imaginemos que queremos multiplicar el intervalo [1-3]:

	Paso 1:
		Empiezo por la raiz.

		[0]		[1]		[2]		[3]
		[A]		[B]		[C]		[D]
			[0-1]			[2-3]
			[AB]			[CD]
					>[0-3]
					>[ABCD]

	Paso 2:
		Ambos hijos de la raiz contienen elementos de [1-3], entonces expando ambos lados.

		[0]		[1]		[2]		[3]
		[A]		[B]		[C]		[D]
			>[0-1]			>[2-3]
			>[AB]			>[CD]
					[0-3]
					[ABCD]

	Paso 3:
		* Hijo derecho: El nodo actual es [2-3], y esta completamente contenido en [1-3], entonces elijo el valor de este nodo.
		* Hijo izquierdo: veo que [0-1] no esta enteremente contenido en [1-3] y que el hijo derecho contiene elementos de [1-3], entonces expando a la derecha

		[0]		>[1]		[2]		[3]
		[A]		>[B]		[C]		[D]
			[0-1]			>[2-3]
			[AB]			>[CD]
					[0-3]
					[ABCD]
	
	Paso 4:

		* Como el Hijo derecho del hijo izquierdo ([1]) esta enteramente contenido en [1-3], lo elijo.
		Resultado =	[1]*[2-3]
		Resultado =	B*CD
		Resultado = BCD


	Es importante notar que la complexidad maxima de esta operacion es (Log(n)+1) * 2, tambien escribible como O(Log(n)).
	La razon de esto es que estamos trabajando con conjuntos, por lo cual despues de una division cada rama solo se crecer en una direccion. 

	Imaginemos que tenemos una division. Mirando la rama izquierda, existe 3 opciones:

		A. El nodo actual esta enteramente contenido en el conjunto buscado. (Termina la busqueda)

		B. El nodo actual no esta enteramente contenido, y solo su hijo derecho contiene elementos del conjunto buscado. (Solo se puede crecer a derecha)

		C. El nodo no esta enteramente contenido, y tanto su hijo izquierdo como su hijo derecho contienen elementos del conjunto buscado. Como la division original no representaba un grupo disjunto de nodos, el hijo derecho va a estar enteramente contenido en el conjunto buscado. (Solo se puede crecer a izquierda)

	Es decir, que por cada nivel la rama solo puede agregar como maximo una operacion de multiplicacion. 
	El caso para la rama derecha es identico, simplemente esta espejado.

Recorriendo todos los intervalos
------------------------------------
	
	Como conocemos la longitud de lo que queremos multiplicar, podemos generar facilmente todos los intervalos. Agarramos el primer nodo hoja como punto de comienzo, y elegimos el intervalo que lo tiene como primero. Operamos con ese intervalo. Luego, pasamos al segundo nodo hoja y repetimos. Iterar esta operacion hasta que nos quedemos sin intervalos para elegir. (En total van a haber n-'Longitud Intervalo' intervalos)

	En el peor caso recorreriamos n intervalos, es decir, esto tendria complejidad O(n). Como cada operacion puede tomar O(Log(n)), la complejidad total de este recorrido es o(n*Log(n)).